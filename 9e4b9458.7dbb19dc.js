(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{120:function(e,t,n){"use strict";var o=n(0),a=n.n(o),l=n(117),c=n(102),r=n(63),s=n.n(r),i=37,b=39;t.a=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,p=e.values,d=e.groupId,u=e.className,m=Object(l.a)(),j=m.tabGroupChoices,h=m.setTabGroupChoices,k=Object(o.useState)(r),g=k[0],O=k[1],w=o.Children.toArray(e.children);if(null!=d){var y=j[d];null!=y&&y!==g&&p.some((function(e){return e.value===y}))&&O(y)}var f=function(e){O(e),null!=d&&h(d,e)},v=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":n},u)},p.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===t,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return v.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case i:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(v,e.target,e)},onFocus:function(){return f(t)},onClick:function(){f(t)}},n)}))),t?Object(o.cloneElement)(w.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return Object(o.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},121:function(e,t,n){"use strict";var o=n(0),a=n.n(o);t.a=function(e){var t=e.children,n=e.hidden,o=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return m}));var o=n(3),a=n(7),l=(n(0),n(105)),c=n(106),r=n(120),s=n(121),i=["components"],b={id:"godwoken",title:"Godwoken",sidebar_label:"Godwoken"},p={unversionedId:"introduction/godwoken",id:"introduction/godwoken",isDocsHomePage:!1,title:"Godwoken",description:"Overview",source:"@site/docs\\introduction\\overview.md",slug:"/introduction/godwoken",permalink:"/ckb_sdk/docs/introduction/godwoken",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/introduction/overview.md",version:"current",sidebar_label:"Godwoken",sidebar:"sidebar2",previous:{title:"ckb-sdk-java",permalink:"/ckb_sdk/docs/introduction/overview_java"},next:{title:"Deploy Godwoken",permalink:"/ckb_sdk/docs/introduction/deploy"}},d=[{value:"Overview",id:"overview",children:[{value:"Godwoken Aggregator Nodes",id:"godwoken-aggregator-nodes",children:[]},{value:"Deployment",id:"deployment",children:[]}]},{value:"Deploy Godwoken by Using Godwoken-Kicker",id:"deploy-godwoken-by-using-godwoken-kicker",children:[]},{value:"Deploy Godwoken Manually",id:"deploy-godwoken-manually",children:[{value:"Environment",id:"environment",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Steps",id:"steps",children:[]},{value:"Porting Ethereum Dapps to Polyjuice",id:"porting-ethereum-dapps-to-polyjuice",children:[]}]},{value:"References",id:"references",children:[]}],u={toc:d};function m(e){var t=e.components,n=Object(a.a)(e,i);return Object(l.b)("wrapper",Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"overview"},"Overview"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Godwoken")," is a layer 2 rollup framework for Nervos CKB. It provides scaling capabilities with rollups that perform transaction execution outside CKB chain."),Object(l.b)("p",null,"Godwoken supports optimistic rollups that can use the always success script or ",Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/clerkb"},"Proof of Authority")," to issue layer 2 blocks. When POA is used, limited ",Object(l.b)("inlineCode",{parentName:"p"},"block_producers")," can issue layer 2 blocks. For more information, see ",Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/master/docs/life_of_a_godwoken_transaction.md#life-of-a-godwoken-transaction"},"Life of a Godwoken transaction"),"."),Object(l.b)("p",null,"Godwoken can support porting Ethereum DApps to CKB when it is integrated with Polyjuice. Polyjuice is an Ethereum compatible layer that allows Solidity based smart contracts to run on Nervos. Polyjuice uses ",Object(l.b)("a",{parentName:"p",href:"https://github.com/ethereum/evmone"},"evmone")," as the EVM implementation in both ",Object(l.b)("inlineCode",{parentName:"p"},"generator")," and ",Object(l.b)("inlineCode",{parentName:"p"},"validator"),". It accepts Ethereum transactions and execute the transactions in EVM. For more information, see ",Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken-polyjuice"},"Polyjuice for Godwoken")," and ",Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken/blob/master/docs/life_of_a_polyjuice_transaction.md"},"Life of a Polyjuice Transaction"),"."),Object(l.b)("h3",{id:"godwoken-aggregator-nodes"},"Godwoken Aggregator Nodes"),Object(l.b)("p",null,"Godwoken works by using ",Object(l.b)("strong",{parentName:"p"},"aggregator")," nodes. The aggregator nodes are used to:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Collect specially designed layer 2 transactions."),Object(l.b)("li",{parentName:"ol"},"Pack the special transactions into CKB transactions that can also be considered as layer 2 blocks."),Object(l.b)("li",{parentName:"ol"},"Submit the CKB transactions to layer 1 for acceptance. ")),Object(l.b)("img",{src:Object(c.a)("img/godwoken.png"),width:"70%"}),Object(l.b)("h3",{id:"deployment"},"Deployment"),Object(l.b)("p",null,"Two deployment methods are provided to deploy Godwoken for different deployment requirements:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Deploy Godwoken by using Godwoken-kicker"),Object(l.b)("p",{parentName:"li"},"Godwoken-kicker is a one line command to start Godwoken with Polyjuice chain on Devnet. This deployment method can help developers migrate Ethereum DApps to CKB Devnet quickly in testing and development environments.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Deploy Godwoken manually"),Object(l.b)("p",{parentName:"li"},"This deployment method is useful in situations such as deploying Godwoken for Testnet."))),Object(l.b)("h2",{id:"deploy-godwoken-by-using-godwoken-kicker"},"Deploy Godwoken by Using Godwoken-Kicker"),Object(l.b)("p",null,"Godwoken-kicker provides a quick mode and a custom mode for the deployment."),Object(l.b)(r.a,{defaultValue:"quick",values:[{label:"Quick Mode",value:"quick"},{label:"Custom Mode",value:"custom"}],mdxType:"Tabs"},Object(l.b)(s.a,{value:"quick",mdxType:"TabItem"},Object(l.b)("p",null,"The quick mode executes the builds of all components from prebuild docker images. It's fast and simple."),Object(l.b)("b",null,"Environment"),Object(l.b)("p",null,Object(l.b)("ul",null,Object(l.b)("li",null,"Ubuntu 20.04 LTS"))),Object(l.b)("b",null,"Prerequisites"),Object(l.b)("p",null,Object(l.b)("ul",null,Object(l.b)("li",null,Object(l.b)("a",{href:"https://docs.docker.com/engine/install/ubuntu/"},"Docker\xa0Engine")),Object(l.b)("li",null,Object(l.b)("a",{href:"https://docs.docker.com/compose/install/"},"Docker\xa0Compose")))),Object(l.b)("p",null,Object(l.b)("b",null,"Steps")),Object(l.b)("ol",null,Object(l.b)("li",null,"Clone the source of Godwoken-kicker.",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/RetricSu/godwoken-kicker.git\n$ cd godwoken-kicker\n"))),Object(l.b)("li",null,"Initialize Godwoken-kicker.",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"$ make init\n"))),Object(l.b)("li",null,"Start the Godwoken chain with Polyjuice.",Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"$ make start\n")),Object(l.b)("details",null,Object(l.b)("summary",null,"Output"),Object(l.b)("p",null,Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"Building ckb\nBuilding polyjuice\nBuilding call-polyman\nBuilding godwoken\nBuilding web3\nStarting docker_postgres_1 ... done\nStarting docker_ckb_1      ... done\nStarting docker_polyjuice_1    ... done\nStarting docker_call-polyman_1 ... done\nStarting docker_indexer_1      ... done\nStarting docker_godwoken_1     ... done\nStarting docker_web3_1         ... done\n\nRun commands to monitor background activities: \n\n    make sg (Godwoken)\n    make sp (Polyjuice)\n    make web3 (web3)\n    make call-polyman (setup service)\n\nAll Jobs Done       : [########################################] 100%\n\nGreat! Checkout http://localhost:6100 to deploy contract!\n")))),Object(l.b)("p",null,"When the Godwoken chain is started successfully, the chain can be accessed at http://localhost:6100.")),Object(l.b)("li",null,Object(l.b)("p",null,"Set up an Ethereum wallet."),Object(l.b)("p",null,"In this example, MetaMask (an Ethereum Wallet) is used."),Object(l.b)("ol",null,Object(l.b)("li",null,Object(l.b)("p",null,"Add the MetaMask extension in the browser."),Object(l.b)("p",null,"The supported browsers include Firefox, Google Chrome, Brave and Microsoft Edge.")),Object(l.b)("li",null,Object(l.b)("p",null,"Connect the Godwoken chain in MetaMask."),Object(l.b)("p",null,"The New RPC URL (the web3 API of the Godwoken chain) and the Chain ID information can be found on the Chain Info page at http://localhost:6100."),Object(l.b)("p",null,Object(l.b)("ul",null,Object(l.b)("li",null,"New RPC URL: http://localhost:8024"),Object(l.b)("li",null,"Chain ID: 1024777"))),Object(l.b)("img",{src:Object(c.a)("img/metamask.png"),width:"70%"})))),Object(l.b)("li",null,"Open the Godwoken chain page at http://localhost:6100."),Object(l.b)("li",null,"Deposit 400 CKB to the ETH wallet on the ACCOUNTS page."),Object(l.b)("li",null,"Deploy the ETH contract that you have compiled on the CONTRACT page."))),Object(l.b)(s.a,{value:"custom",mdxType:"TabItem"},Object(l.b)("p",null,"The custom mode builds all components from local packages and executes the builds locally. It's more flexible for custom requirements."))),Object(l.b)("h2",{id:"deploy-godwoken-manually"},"Deploy Godwoken Manually"),Object(l.b)("h3",{id:"environment"},"Environment"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"OS: Ubuntu 20.04")),Object(l.b)("h3",{id:"prerequisites"},"Prerequisites"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/capsule"},"Capsule"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/molecule"},"Moleculec"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Rust nightly")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"Docker")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"A CKB node ( >= 0.40.0) is installed and running on DEV chain. For more information about installing a CKB node, see ",Object(l.b)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbnode#install-a-ckb-node-by-using-tippy"},"Install a CKB Node by Using Tippy"),"."))),Object(l.b)("h3",{id:"steps"},"Steps"),Object(l.b)("h4",{id:"step-1-build-scripts"},"Step 1. Build scripts"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"cd godwoken-scripts && cd c && make && cd - && capsule build --release --debug-output\n")),Object(l.b)("h4",{id:"step-2-build-poa-scripts"},"Step 2. Build PoA scripts"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"git clone --recursive https://github.com/nervosnetwork/clerkb\ncd clerkb\nyarn\nmake all-via-docker\ncp build/debug/poa godwoken-scripts/build/release/poa\ncp build/debug/state godwoken-scripts/build/release/state\n")),Object(l.b)("h4",{id:"step-3-deploy-scripts"},"Step 3. Deploy scripts"),Object(l.b)("p",null,"Create scripts-deploy.json"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'mkdir deploy\ntouch deploy/scripts-deploy.json\n{\n  "programs": {\n    "custodian_lock": "/scripts/release/always-success",\n    "deposition_lock": "/scripts/release/always-success",\n    "withdrawal_lock": "/scripts/release/always-success",\n    "challenge_lock": "/scripts/release/always-success",\n    "stake_lock": "/scripts/release/always-success",\n    "state_validator": "/scripts/release/always-success",\n    "l2_sudt_validator": "/scripts/release/always-success",\n    "meta_contract_validator": "/scripts/release/always-success",\n    "eth_account_lock": "/scripts/release/always-success",\n    "tron_account_lock": "/scripts/release/always-success",\n    "polyjuice_validator": "/scripts/release/always-success",\n    "state_validator_lock": "/scripts/release/always-success",\n    "poa_state": "/scripts/release/always-success"\n  },\n  "lock": {\n    "code_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n    "hash_type": "data",\n    "args": "0x"\n  }\n}\n')),Object(l.b)("p",null,"Replace the always-success with the real one in scripts-deploy.json above."),Object(l.b)("p",null,"Command:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"cd godwoken\ncargo run --bin gw-tools -- deploy-scripts -i deploy/scripts-deploy.json -o deploy/scripts-deploy-result.json -k ../ckb_nodes/dev1/pk\n")),Object(l.b)("h4",{id:"step-4-deploy-layer2-genesis"},"Step 4. Deploy layer2 genesis"),Object(l.b)("p",null,"Create poa-config.json"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"touch deploy/poa-config.json\n")),Object(l.b)("p",null,"setup two godwoken nodes:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'{\n  "poa_setup": {\n    "identity_size": 32,\n    "round_interval_uses_seconds": true,\n    "identities": [\n      "<Godwoken wallet lock script hash 1>",\n      "<Godwoken wallet lock script hash 2>"\n    ],\n    "aggregator_change_threshold": 2,\n    "round_intervals": 24,\n    "subblocks_per_round": 1\n  }\n}\n')),Object(l.b)("p",null,"Create rollup-config.json"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'touch deploy/rollup-config.json\n{\n  "l1_sudt_script_type_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n  "burn_lock_hash": "0x0000000000000000000000000000000000000000000000000000000000000000",\n  "required_staking_capacity": 10000000000,\n  "challenge_maturity_blocks": 5,\n  "finality_blocks": 20,\n  "reward_burn_rate": 50,\n  "compatible_chain_id": 0,\n  "allowed_eoa_type_hashes": []\n}\n')),Object(l.b)("p",null,"Command:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"cargo run --bin gw-tools -- deploy-genesis -k deploy/pk_gw1 -d deploy/scripts-deploy-result.json -p deploy/poa-config.json -u deploy/rollup-config.json -o deploy/genesis-deploy-result.json\n")),Object(l.b)("h4",{id:"step-5-build-polyjuice"},"Step 5. Build polyjuice"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"git clone --recursive https://github.com/nervosnetwork/godwoken-polyjuice.git\ncd godwoken-polyjuice && make all-via-docker\ncp build/generator /deploy/polyjuice-generator\n# We should use real one in the later version\ncp /godwoken-scripts/build/release/always-success /deploy/polyjuice-validator\n")),Object(l.b)("h4",{id:"step-6-generate-godwoken-config"},"Step 6. Generate godwoken config"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"cargo run --bin gw-tools -- generate-config -g deploy/genesis-deploy-result.json -s deploy/scripts-deploy-result.json -p deploy/ -o config.toml\n")),Object(l.b)("p",null,"Update config.toml for every godwoken node:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"[rpc_server]\nlisten = 'localhost:8119'\n[[backends]]\nvalidator_path = 'deploy/polyjuice-validator' # update the path to your own\ngenerator_path = 'deploy/polyjuice-generator' # update the path to your own\n[block_producer.wallet_config]\nprivkey_path = './deploy/pk_gw1' # update godwoken node private key path\n\n[block_producer.wallet_config.lock]\ncode_hash = '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8' # update to the block_assembler.code_hash\nhash_type = 'type' # update to 'type'\nargs = '0x3d7037a69dbb4fa019ca1b11f86b70470d2ab1d0' # update to godwoken wallet lock_arg\n")),Object(l.b)("p",null,"Run:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"RUST_LOG=info cargo run --bin godwoken\n")),Object(l.b)("h4",{id:"step-7-start-godwoken"},"Step 7. Start Godwoken"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"docker run -vgodwoken-internal/deployment-notes/testnet/operator-config.toml:/deploy/config.toml -v/deploy/godwoken-testnet-v2/pk2:/deploy/pk -eRUST_BACKTRACE=1 nervos/godwoken-prebuilds:v0.5.0-rc1 godwoken run -c /deploy/config.toml\n")),Object(l.b)("h4",{id:"step-8-setup-polyjuice"},"Step 8. Setup Polyjuice"),Object(l.b)("p",null,"First, clone & setup ",Object(l.b)("a",{parentName:"p",href:"https://github.com/nervosnetwork/godwoken-examples"},"godwoken-examples")),Object(l.b)("p",null,"Then, deposit to create an account. (Need some time to build index in the first time running)."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"LUMOS_CONFIG_FILE=`pwd`/config.json node ./packages/tools/lib/account-cli.js deposit -c 40000000000 -p <privkey>\n")),Object(l.b)("h4",{id:"step-9-start-web3-server"},"Step 9. Start Web3 Server"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Clear the postgres DB."),Object(l.b)("li",{parentName:"ol"},"Run migration sql files to recreate tables."),Object(l.b)("li",{parentName:"ol"},"Run server")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"docker run -vweb3.env:/godwoken-web3/packages/api-server/.env -w/godwoken-web3 nervos/godwoken-js-prebuilds:v0.3.1-rc2 yarn workspace @godwoken-web3/api-server start\n")),Object(l.b)("h3",{id:"porting-ethereum-dapps-to-polyjuice"},"Porting Ethereum Dapps to Polyjuice"),Object(l.b)("h2",{id:"references"},"References"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Resource"),Object(l.b)("th",{parentName:"tr",align:null},"Link"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Nervos","\xa0","Document","\xa0","Website"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"https://docs.nervos.org/"},"https://docs.nervos.org/"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Godwoken Basics"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("ul",null,Object(l.b)("li",null,Object(l.b)("a",{parentName:"td",href:"https://talk.nervos.org/t/introducing-godwoken-a-missing-piece-of-the-cell-model/4464?_360safeparam=13594453"},"Introducing Godwoken - A missing piece of the cell model")),Object(l.b)("li",null,Object(l.b)("a",{parentName:"td",href:"https://medium.com/nervosnetwork/towards-ckb-style-lego-pieces-polyjuice-on-godwoken-cbc935d77abf"},"Towards CKB style Lego pieces: Polyjuice on Godwoken"))))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Source","\xa0","Code"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"https://github.com/nervosnetwork/lumos"},"https://github.com/nervosnetwork/lumos"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Godwoken-Kicker"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"https://github.com/RetricSu/godwoken-kicker"},"Godwoken-Kicker: one line command to start godwoken-polyjuice chain"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Godwoken Testnet"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"https://github.com/jjyr/godwoken-testnet"},"Godwoken Testnet"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Ethereum RPC (web3 RPC)"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"https://geth.ethereum.org/docs/rpc/server"},"Ethereum RPC (web3 RPC)"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"Gitcoin Hackathon"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("ul",null,Object(l.b)("li",null,Object(l.b)("a",{parentName:"td",href:"https://github.com/Kuzirashi/gw-gitcoin-instruction"},"Godwoken Gitcoin Instruction")),Object(l.b)("li",null,Object(l.b)("a",{parentName:"td",href:"https://gitcoin.co/hackathon/nervos/onboard"},"NERVOS - BROADEN THE SPECTRUM"))))))))}m.isMDXComponent=!0}}]);